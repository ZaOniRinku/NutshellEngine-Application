#include "Core/src/ntshengn_core.h"
#include "scripts/camerascript.h"
#include "scripts/cubescript.h"

std::array<nml::vec3, 2> getMeshMinMax(const NtshEngn::Mesh& mesh) {
	nml::vec3 min = nml::vec3(std::numeric_limits<float>::max());
	nml::vec3 max = nml::vec3(std::numeric_limits<float>::lowest());
	for (const NtshEngn::Vertex& vertex : mesh.vertices) {
		if (vertex.position[0] < min.x) {
			min.x = vertex.position[0];
		}
		if (vertex.position[0] > max.x) {
			max.x = vertex.position[0];
		}

		if (vertex.position[1] < min.y) {
			min.y = vertex.position[1];
		}
		if (vertex.position[1] > max.y) {
			max.y = vertex.position[1];
		}

		if (vertex.position[2] < min.z) {
			min.z = vertex.position[2];
		}
		if (vertex.position[2] > max.z) {
			max.z = vertex.position[2];
		}
	}


	return { min, max };
}

void scene(NtshEngn::Core& core) {
	NtshEngn::ECS* ecs = core.getECS();
	NtshEngn::AssetManager* assetManager = core.getAssetManager();

	const float toRad = 3.1415926535897932384626433832795f / 180.0f;

	// Create the camera
	NtshEngn::Entity camera = ecs->createEntity();

	NtshEngn::Transform& cameraTransform = ecs->getComponent<NtshEngn::Transform>(camera);
	cameraTransform.position = { 0.0f, 0.0f, 7.0f };
	cameraTransform.rotation = { 0.0f, 0.0f, -1.0f };
	cameraTransform.scale = { 5.0f * toRad, 10.0f * toRad, 0.0f };

	NtshEngn::Camera cameraCamera;
	cameraCamera.fov = 45.0f;
	cameraCamera.nearPlane = 0.03f;
	cameraCamera.farPlane = 100.0f;
	ecs->addComponent(camera, cameraCamera);

	NtshEngn::Light cameraLight;
	cameraLight.color = { 1.0f, 1.0f, 1.0f };
	cameraLight.type = NtshEngn::LightType::Spot;
	//ecs->addComponent(camera, cameraLight);

	NtshEngn::Scriptable cameraScriptable;
	cameraScriptable.script = std::make_unique<CameraScript>();
	ecs->addComponent(camera, cameraScriptable);

	// Create a cube model
	NtshEngn::Model* cubeMesh = assetManager->createModel();
	cubeMesh->primitives.resize(1);
	cubeMesh->primitives[0].mesh.vertices = {
		{ {1.0f, 1.0f, -1.0f}, {0.0f, 1.0f, 0.0f}, {1.0f, 0.0f} },
		{ {-1.0f, 1.0f, -1.0f}, {0.0f, 1.0f, 0.0f}, {1.0f, 1.0f} },
		{ {-1.0f, 1.0f, 1.0f}, {0.0f, 1.0f, 0.0f}, {0.0f, 1.0f} },
		{ {1.0f, 1.0f, 1.0f}, {0.0f, 1.0f, 0.0f}, {0.0f, 0.0f} },
		{ {1.0f, -1.0f, 1.0f}, {0.0f, 0.0f, 1.0f}, {1.0f, 0.0f} },
		{ {1.0f, 1.0f, 1.0f}, {0.0f, 0.0f, 1.0f}, {1.0f, 1.0f} },
		{ {-1.0f, 1.0f, 1.0f}, {0.0f, 0.0f, 1.0f}, {0.0f, 1.0f} },
		{ {-1.0f, -1.0f, 1.0f}, {0.0f, 0.0f, 1.0f}, {0.0f, 0.0f} },
		{ {-1.0f, -1.0f, 1.0f}, {-1.0f, 0.0f, 0.0f}, {1.0f, 0.0f} },
		{ {-1.0f, 1.0f, 1.0f}, {-1.0f, 0.0f, 0.0f}, {1.0f, 1.0f} },
		{ {-1.0f, 1.0f, -1.0f}, {-1.0f, 0.0f, 0.0f}, {0.0f, 1.0f} },
		{ {-1.0f, -1.0f, -1.0f}, {-1.0f, 0.0f, 0.0f}, {0.0f, 0.0f} },
		{ {-1.0f, -1.0f, -1.0f}, {0.0f, -1.0f, 0.0f}, {1.0f, 0.0f} },
		{ {1.0f, -1.0f, -1.0f}, {0.0f, -1.0f, 0.0f}, {1.0f, 1.0f} },
		{ {1.0f, -1.0f, 1.0f}, {0.0f, -1.0f, 0.0f}, {0.0f, 1.0f} },
		{ {-1.0f, -1.0f, 1.0f}, {0.0f, -1.0f, 0.0f}, {0.0f, 0.0f} },
		{ {1.0f, -1.0f, -1.0f}, {1.0f, 0.0f, 0.0f}, {1.0f, 0.0f} },
		{ {1.0f, 1.0f, -1.0f}, {1.0f, 0.0f, 0.0f}, {1.0f, 1.0f} },
		{ {1.0f, 1.0f, 1.0f}, {1.0f, 0.0f, 0.0f}, {0.0f, 1.0f} },
		{ {1.0f, -1.0f, 1.0f}, {1.0f, 0.0f, 0.0f}, {0.0f, 0.0f} },
		{ {-1.0f, -1.0f, -1.0f}, {0.0f, 0.0f, -1.0f}, {1.0f, 0.0f} },
		{ {-1.0f, 1.0f, -1.0f}, {0.0f, 0.0f, -1.0f}, {1.0f, 1.0f} },
		{ {1.0f, 1.0f, -1.0f}, {0.0f, 0.0f, -1.0f}, {0.0f, 1.0f} },
		{ {1.0f, -1.0f, -1.0f}, {0.0f, 0.0f, -1.0f}, {0.0f, 0.0f} }
	};
	cubeMesh->primitives[0].mesh.indices = {
	0, 1, 2,
	0, 2, 3,
	4, 5, 6,
	4, 6, 7,
	8, 9, 10,
	8, 10, 11,
	12, 13, 14,
	12, 14, 15,
	16, 17, 18,
	16, 18, 19,
	20, 21, 22,
	20, 22, 23
	};
	assetManager->calculateTangents(cubeMesh->primitives[0].mesh);

	NtshEngn::Image* cubeTexture = assetManager->createImage();
	cubeTexture->width = 30;
	cubeTexture->height = 30;
	cubeTexture->format = NtshEngn::ImageFormat::R8G8B8A8;
	cubeTexture->colorSpace = NtshEngn::ImageColorSpace::SRGB;
	cubeTexture->data = { 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 255, 183, 82, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255, 197, 123, 19, 255 };

	cubeMesh->primitives[0].material.diffuseTexture.image = cubeTexture;
	cubeMesh->primitives[0].material.diffuseTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.diffuseTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.diffuseTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.diffuseTexture.imageSampler.anisotropyLevel = 8.0f;

	NtshEngn::Image* cubeNormalTexture = assetManager->createImage();
	cubeNormalTexture->width = 30;
	cubeNormalTexture->height = 30;
	cubeNormalTexture->format = NtshEngn::ImageFormat::R8G8B8A8;
	cubeNormalTexture->colorSpace = NtshEngn::ImageColorSpace::Linear;
	cubeNormalTexture->data = { 127, 127, 255, 255, 75, 180, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 180, 180, 231, 255, 127, 127, 255, 255, 75, 180, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 180, 180, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 75, 75, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 180, 75, 231, 255, 127, 127, 255, 255, 75, 75, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 180, 75, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 180, 180, 231, 255, 127, 127, 255, 255, 75, 180, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 180, 180, 231, 255, 127, 127, 255, 255, 75, 180, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 180, 75, 231, 255, 127, 127, 255, 255, 75, 75, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 180, 75, 231, 255, 127, 127, 255, 255, 75, 75, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 75, 180, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 180, 180, 231, 255, 127, 127, 255, 255, 75, 180, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 180, 180, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 75, 75, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 180, 75, 231, 255, 127, 127, 255, 255, 75, 75, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 180, 75, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 180, 180, 231, 255, 127, 127, 255, 255, 75, 180, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 180, 180, 231, 255, 127, 127, 255, 255, 75, 180, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 180, 75, 231, 255, 127, 127, 255, 255, 75, 75, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 180, 75, 231, 255, 127, 127, 255, 255, 75, 75, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 180, 180, 231, 255, 127, 127, 255, 255, 75, 180, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 180, 180, 231, 255, 127, 127, 255, 255, 75, 180, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 128, 202, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 202, 128, 231, 255, 127, 127, 255, 255, 53, 128, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 180, 75, 231, 255, 127, 127, 255, 255, 75, 75, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 180, 75, 231, 255, 127, 127, 255, 255, 75, 75, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 128, 53, 231, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255, 127, 127, 255, 255 };

	cubeMesh->primitives[0].material.normalTexture.image = cubeNormalTexture;
	cubeMesh->primitives[0].material.normalTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.normalTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.normalTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.normalTexture.imageSampler.anisotropyLevel = 0.0f;

	NtshEngn::Image* cubeORMTexture = assetManager->createImage();
	cubeORMTexture->width = 30;
	cubeORMTexture->height = 30;
	cubeORMTexture->format = NtshEngn::ImageFormat::R8G8B8A8;
	cubeORMTexture->colorSpace = NtshEngn::ImageColorSpace::Linear;
	cubeORMTexture->data = { 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 55, 64, 64, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55, 50, 55, 0, 55 };

	cubeMesh->primitives[0].material.occlusionTexture.image = cubeORMTexture;
	cubeMesh->primitives[0].material.occlusionTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.occlusionTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.occlusionTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.occlusionTexture.imageSampler.anisotropyLevel = 0.0f;

	cubeMesh->primitives[0].material.roughnessTexture.image = cubeORMTexture;
	cubeMesh->primitives[0].material.roughnessTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.roughnessTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.roughnessTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.roughnessTexture.imageSampler.anisotropyLevel = 0.0f;

	cubeMesh->primitives[0].material.metalnessTexture.image = cubeORMTexture;
	cubeMesh->primitives[0].material.metalnessTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.metalnessTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.metalnessTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	cubeMesh->primitives[0].material.metalnessTexture.imageSampler.anisotropyLevel = 0.0f;

	std::array<nml::vec3, 2> cubeMeshAABB = getMeshMinMax(cubeMesh->primitives[0].mesh);
	NtshEngn::AABBCollidable cubeCollidable;
	cubeCollidable.collider.min = { cubeMeshAABB[0].x, cubeMeshAABB[0].y, cubeMeshAABB[0].z };
	cubeCollidable.collider.max = { cubeMeshAABB[1].x, cubeMeshAABB[1].y, cubeMeshAABB[1].z };

	// top cube light
	NtshEngn::Entity topCube = ecs->createEntity();

	NtshEngn::Transform& topCubeTransform = ecs->getComponent<NtshEngn::Transform>(topCube);
	topCubeTransform.position[0] = 0.0f;
	topCubeTransform.position[1] = 2.0f;
	topCubeTransform.position[2] = 0.0f;
	topCubeTransform.scale = { 0.5f, 0.10f, 0.5f };

	NtshEngn::Image* topCubeImage = assetManager->createImage();
	topCubeImage->width = 1;
	topCubeImage->height = 1;
	topCubeImage->format = NtshEngn::ImageFormat::R8G8B8A8;
	topCubeImage->colorSpace = NtshEngn::ImageColorSpace::SRGB;
	topCubeImage->data = { 0, 0, 0, 255 };

	NtshEngn::Image* topCubeORM = assetManager->createImage();
	topCubeORM->width = 1;
	topCubeORM->height = 1;
	topCubeORM->format = NtshEngn::ImageFormat::R8G8B8A8;
	topCubeORM->colorSpace = NtshEngn::ImageColorSpace::Linear;
	topCubeORM->data = { 255, 255, 255, 255 };

	NtshEngn::Image* topCubeEmissive = assetManager->createImage();
	topCubeEmissive->width = 1;
	topCubeEmissive->height = 1;
	topCubeEmissive->format = NtshEngn::ImageFormat::R8G8B8A8;
	topCubeEmissive->colorSpace = NtshEngn::ImageColorSpace::Linear;
	topCubeEmissive->data = { 255, 255, 255, 255 };

	NtshEngn::Material topCubeMaterial;
	topCubeMaterial.diffuseTexture.image = topCubeImage;
	topCubeMaterial.diffuseTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.diffuseTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.diffuseTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.diffuseTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.diffuseTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.diffuseTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.diffuseTexture.imageSampler.anisotropyLevel = 0.0f;
	topCubeMaterial.occlusionTexture.image = topCubeORM;
	topCubeMaterial.occlusionTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.occlusionTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.occlusionTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.occlusionTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.occlusionTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.occlusionTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.occlusionTexture.imageSampler.anisotropyLevel = 0.0f;
	topCubeMaterial.roughnessTexture.image = topCubeORM;
	topCubeMaterial.roughnessTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.roughnessTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.roughnessTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.roughnessTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.roughnessTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.roughnessTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.roughnessTexture.imageSampler.anisotropyLevel = 0.0f;
	topCubeMaterial.metalnessTexture.image = topCubeORM;
	topCubeMaterial.metalnessTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.metalnessTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.metalnessTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.metalnessTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.metalnessTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.metalnessTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.metalnessTexture.imageSampler.anisotropyLevel = 0.0f;
	topCubeMaterial.emissiveTexture.image = topCubeEmissive;
	topCubeMaterial.emissiveTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.emissiveTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.emissiveTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	topCubeMaterial.emissiveTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.emissiveTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.emissiveTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	topCubeMaterial.emissiveTexture.imageSampler.anisotropyLevel = 0.0f;

	NtshEngn::Renderable topCubeRenderable;
	topCubeRenderable.mesh = &cubeMesh->primitives[0].mesh;
	topCubeRenderable.material = &topCubeMaterial;
	ecs->addComponent(topCube, topCubeRenderable);

	ecs->addComponent(topCube, cubeCollidable);

	// left cube
	NtshEngn::Entity leftCube = ecs->createEntity();

	NtshEngn::Transform& leftCubeTransform = ecs->getComponent<NtshEngn::Transform>(leftCube);
	leftCubeTransform.position[0] = -0.75f;
	leftCubeTransform.position[1] = -1.25f;
	leftCubeTransform.position[2] = -0.5f;
	leftCubeTransform.rotation[1] = -45.0f * toRad;
	leftCubeTransform.scale = { 0.5f, 0.75f, 0.5f };

	NtshEngn::Image* leftCubeImage = assetManager->createImage();
	leftCubeImage->width = 1;
	leftCubeImage->height = 1;
	leftCubeImage->format = NtshEngn::ImageFormat::R8G8B8A8;
	leftCubeImage->colorSpace = NtshEngn::ImageColorSpace::SRGB;
	leftCubeImage->data = { 0, 0, 0, 255 };

	NtshEngn::Image* leftCubeORM = assetManager->createImage();
	leftCubeORM->width = 3;
	leftCubeORM->height = 3;
	leftCubeORM->format = NtshEngn::ImageFormat::R8G8B8A8;
	leftCubeORM->colorSpace = NtshEngn::ImageColorSpace::Linear;
	leftCubeORM->data = { 
		255, 255, 255, 255,
		255, 255, 255, 255,
		255, 255, 255, 255,
		255, 128, 255, 255,
		255, 128, 0, 255,
		255, 255, 0, 255,
		255, 0, 0, 255,
		255, 255, 0, 255,
		255, 128, 128, 255,
	};

	NtshEngn::Image* leftCubeEmissive = assetManager->createImage();
	leftCubeEmissive->width = 3;
	leftCubeEmissive->height = 3;
	leftCubeEmissive->format = NtshEngn::ImageFormat::R8G8B8A8;
	leftCubeEmissive->colorSpace = NtshEngn::ImageColorSpace::Linear;
	leftCubeEmissive->data = { 255, 0, 0, 255,
		0, 255, 0, 255,
		0, 0, 255, 255,
		0, 255, 0, 255,
		0, 255, 255, 255,
		255, 128, 0, 255,
		255, 0, 255, 255,
		255, 0, 128, 255,
		128, 255, 0, 255
	};

	if (core.getWindowModule()) {
		core.getWindowModule()->setIcon(core.getWindowModule()->getMainWindowID(), *leftCubeEmissive);
	}

	NtshEngn::Material leftCubeMaterial;
	leftCubeMaterial.diffuseTexture.image = leftCubeImage;
	leftCubeMaterial.diffuseTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.diffuseTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.diffuseTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.diffuseTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.diffuseTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.diffuseTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.diffuseTexture.imageSampler.anisotropyLevel = 0.0f;
	leftCubeMaterial.occlusionTexture.image = leftCubeORM;
	leftCubeMaterial.occlusionTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.occlusionTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.occlusionTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.occlusionTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.occlusionTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.occlusionTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.occlusionTexture.imageSampler.anisotropyLevel = 0.0f;
	leftCubeMaterial.roughnessTexture.image = leftCubeORM;
	leftCubeMaterial.roughnessTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.roughnessTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.roughnessTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.roughnessTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.roughnessTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.roughnessTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.roughnessTexture.imageSampler.anisotropyLevel = 0.0f;
	leftCubeMaterial.metalnessTexture.image = leftCubeORM;
	leftCubeMaterial.metalnessTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.metalnessTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.metalnessTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.metalnessTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.metalnessTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.metalnessTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.metalnessTexture.imageSampler.anisotropyLevel = 0.0f;
	leftCubeMaterial.emissiveTexture.image = leftCubeEmissive;
	leftCubeMaterial.emissiveTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.emissiveTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.emissiveTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftCubeMaterial.emissiveTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.emissiveTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.emissiveTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftCubeMaterial.emissiveTexture.imageSampler.anisotropyLevel = 0.0f;

	NtshEngn::Renderable leftCubeRenderable;
	leftCubeRenderable.mesh = &cubeMesh->primitives[0].mesh;
	leftCubeRenderable.material = &leftCubeMaterial;
	ecs->addComponent(leftCube, leftCubeRenderable);

	NtshEngn::Scriptable leftCubeScriptable;
	leftCubeScriptable.script = std::make_unique<CubeScript>();
	ecs->addComponent(leftCube, leftCubeScriptable);

	ecs->addComponent(leftCube, cubeCollidable);

	// right cube
	NtshEngn::Entity rightCube = ecs->createEntity();

	NtshEngn::Transform& rightCubeTransform = ecs->getComponent<NtshEngn::Transform>(rightCube);
	rightCubeTransform.position[0] = 0.75f;
	rightCubeTransform.position[1] = -1.5f;
	rightCubeTransform.position[2] = 0.5f;
	rightCubeTransform.rotation[1] = 45.0f * toRad;
	rightCubeTransform.scale = { 0.5f, 0.5f, 0.5f };

	NtshEngn::Renderable rightCubeRenderable;
	rightCubeRenderable.mesh = &cubeMesh->primitives[0].mesh;
	rightCubeRenderable.material = &cubeMesh->primitives[0].material;
	ecs->addComponent(rightCube, rightCubeRenderable);

	NtshEngn::Scriptable cubeScriptable;
	cubeScriptable.script = std::make_unique<CubeScript>();
	ecs->addComponent(rightCube, cubeScriptable);

	ecs->addComponent(rightCube, cubeCollidable);

	// Create a plane model
	NtshEngn::Model* planeMesh = assetManager->createModel();
	planeMesh->primitives.resize(1);
	planeMesh->primitives[0].mesh.vertices = {
		{ {-1.0f, 0.0f, -1.0f}, {0.0f, 1.0f, 0.0f}, {0.0f, 1.0f} },
		{ {-1.0f, 0.0f, 1.0f}, {0.0f, 1.0f, 0.0f}, {0.0f, 0.0f} },
		{ {1.0f, 0.0f, 1.0f}, {0.0f, 1.0f, 0.0f}, {1.0f, 0.0f} },
		{ {1.0f, 0.0f, -1.0f}, {0.0f, 1.0f, 0.0f}, {1.0f, 1.0f} }
	};
	planeMesh->primitives[0].mesh.indices = {
	0, 1, 2,
	0, 2, 3
	};
	assetManager->calculateTangents(planeMesh->primitives[0].mesh);

	std::array<nml::vec3, 2> planeMeshAABB = getMeshMinMax(planeMesh->primitives[0].mesh);
	NtshEngn::AABBCollidable planeCollidable;
	planeCollidable.collider.min = { planeMeshAABB[0].x, planeMeshAABB[0].y, planeMeshAABB[0].z };
	planeCollidable.collider.max = { planeMeshAABB[1].x, planeMeshAABB[1].y, planeMeshAABB[1].z };

	// Create a plane Entity
	// bot
	NtshEngn::Entity botPlane = ecs->createEntity();

	NtshEngn::Transform& botPlaneTransform = ecs->getComponent<NtshEngn::Transform>(botPlane);
	botPlaneTransform.position[1] = -2.0f;
	botPlaneTransform.scale = { 2.0f, 2.0f, 2.0f };

	NtshEngn::Image* botPlaneImage = assetManager->createImage();
	botPlaneImage->width = 1;
	botPlaneImage->height = 1;
	botPlaneImage->format = NtshEngn::ImageFormat::R8G8B8A8;
	botPlaneImage->colorSpace = NtshEngn::ImageColorSpace::SRGB;
	botPlaneImage->data = { 128, 128, 128, 255 };

	NtshEngn::Image* botPlaneORM = assetManager->createImage();
	botPlaneORM->width = 1;
	botPlaneORM->height = 1;
	botPlaneORM->format = NtshEngn::ImageFormat::R8G8B8A8;
	botPlaneORM->colorSpace = NtshEngn::ImageColorSpace::Linear;
	botPlaneORM->data = { 255, 128, 0, 255 };

	NtshEngn::Material botPlaneMaterial;
	botPlaneMaterial.diffuseTexture.image = botPlaneImage;
	botPlaneMaterial.diffuseTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	botPlaneMaterial.diffuseTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	botPlaneMaterial.diffuseTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	botPlaneMaterial.diffuseTexture.imageSampler.anisotropyLevel = 0.0f;
	botPlaneMaterial.occlusionTexture.image = botPlaneORM;
	botPlaneMaterial.occlusionTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	botPlaneMaterial.occlusionTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	botPlaneMaterial.occlusionTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	botPlaneMaterial.occlusionTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	botPlaneMaterial.occlusionTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	botPlaneMaterial.occlusionTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	botPlaneMaterial.occlusionTexture.imageSampler.anisotropyLevel = 0.0f;
	botPlaneMaterial.roughnessTexture.image = botPlaneORM;
	botPlaneMaterial.roughnessTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	botPlaneMaterial.roughnessTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	botPlaneMaterial.roughnessTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	botPlaneMaterial.roughnessTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	botPlaneMaterial.roughnessTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	botPlaneMaterial.roughnessTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	botPlaneMaterial.roughnessTexture.imageSampler.anisotropyLevel = 0.0f;
	botPlaneMaterial.metalnessTexture.image = botPlaneORM;
	botPlaneMaterial.metalnessTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	botPlaneMaterial.metalnessTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	botPlaneMaterial.metalnessTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	botPlaneMaterial.metalnessTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	botPlaneMaterial.metalnessTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	botPlaneMaterial.metalnessTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	botPlaneMaterial.metalnessTexture.imageSampler.anisotropyLevel = 0.0f;

	NtshEngn::Renderable botPlaneRenderable;
	botPlaneRenderable.mesh = &planeMesh->primitives[0].mesh;
	botPlaneRenderable.material = &botPlaneMaterial;
	ecs->addComponent(botPlane, botPlaneRenderable);

	ecs->addComponent(botPlane, planeCollidable);

	// top
	NtshEngn::Entity topPlane = ecs->createEntity();

	NtshEngn::Transform& topPlaneTransform = ecs->getComponent<NtshEngn::Transform>(topPlane);
	topPlaneTransform.position[1] = 2.0f;
	topPlaneTransform.rotation[0] = 180.0f * toRad;
	topPlaneTransform.scale = { 2.0f, 2.0f, 2.0f };

	ecs->addComponent(topPlane, botPlaneRenderable);

	ecs->addComponent(topPlane, planeCollidable);
	
	// Back
	NtshEngn::Entity backPlane = ecs->createEntity();

	NtshEngn::Transform& backPlaneTransform = ecs->getComponent<NtshEngn::Transform>(backPlane);
	backPlaneTransform.position[1] = 0.0f;
	backPlaneTransform.position[2] = -2.0f;
	backPlaneTransform.rotation[0] = 90.0f * toRad;
	backPlaneTransform.scale = { 2.0f, 2.0f, 2.0f };

	ecs->addComponent(backPlane, botPlaneRenderable);

	ecs->addComponent(backPlane, planeCollidable);

	// Left
	NtshEngn::Entity leftPlane = ecs->createEntity();

	NtshEngn::Transform& leftPlaneTransform = ecs->getComponent<NtshEngn::Transform>(leftPlane);
	leftPlaneTransform.position[0] = -2.0f;
	leftPlaneTransform.position[1] = 0.0f;
	leftPlaneTransform.rotation[0] = 90.0f * toRad;
	leftPlaneTransform.rotation[2] = 270.0f * toRad;
	leftPlaneTransform.scale = { 2.0f, 2.0f, 2.0f };

	NtshEngn::Image* leftPlaneImage = assetManager->createImage();
	leftPlaneImage->width = 1;
	leftPlaneImage->height = 1;
	leftPlaneImage->format = NtshEngn::ImageFormat::R8G8B8A8;
	leftPlaneImage->colorSpace = NtshEngn::ImageColorSpace::SRGB;
	leftPlaneImage->data = { 255, 0, 0, 255 };

	NtshEngn::Image* leftPlaneORM = assetManager->createImage();
	leftPlaneORM->width = 1;
	leftPlaneORM->height = 1;
	leftPlaneORM->format = NtshEngn::ImageFormat::R8G8B8A8;
	leftPlaneORM->colorSpace = NtshEngn::ImageColorSpace::Linear;
	leftPlaneORM->data = { 255, 255, 0, 255 };

	NtshEngn::Material leftPlaneMaterial;
	leftPlaneMaterial.diffuseTexture.image = leftPlaneImage;
	leftPlaneMaterial.diffuseTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftPlaneMaterial.diffuseTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftPlaneMaterial.diffuseTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftPlaneMaterial.diffuseTexture.imageSampler.anisotropyLevel = 0.0f;
	leftPlaneMaterial.occlusionTexture.image = leftPlaneORM;
	leftPlaneMaterial.occlusionTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftPlaneMaterial.occlusionTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftPlaneMaterial.occlusionTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftPlaneMaterial.occlusionTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftPlaneMaterial.occlusionTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftPlaneMaterial.occlusionTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftPlaneMaterial.occlusionTexture.imageSampler.anisotropyLevel = 0.0f;
	leftPlaneMaterial.roughnessTexture.image = leftPlaneORM;
	leftPlaneMaterial.roughnessTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftPlaneMaterial.roughnessTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftPlaneMaterial.roughnessTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftPlaneMaterial.roughnessTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftPlaneMaterial.roughnessTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftPlaneMaterial.roughnessTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftPlaneMaterial.roughnessTexture.imageSampler.anisotropyLevel = 0.0f;
	leftPlaneMaterial.metalnessTexture.image = leftPlaneORM;
	leftPlaneMaterial.metalnessTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftPlaneMaterial.metalnessTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftPlaneMaterial.metalnessTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	leftPlaneMaterial.metalnessTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftPlaneMaterial.metalnessTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftPlaneMaterial.metalnessTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	leftPlaneMaterial.metalnessTexture.imageSampler.anisotropyLevel = 0.0f;

	NtshEngn::Renderable leftPlaneRenderable;
	leftPlaneRenderable.mesh = &planeMesh->primitives[0].mesh;
	leftPlaneRenderable.material = &leftPlaneMaterial;
	ecs->addComponent(leftPlane, leftPlaneRenderable);

	ecs->addComponent(leftPlane, planeCollidable);

	// Right
	NtshEngn::Entity rightPlane = ecs->createEntity();

	NtshEngn::Transform& rightPlaneTransform = ecs->getComponent<NtshEngn::Transform>(rightPlane);
	rightPlaneTransform.position[0] = 2.0f;
	rightPlaneTransform.position[1] = 0.0f;
	rightPlaneTransform.rotation[0] = 90.0f * toRad;
	rightPlaneTransform.rotation[2] = 90.0f * toRad;
	rightPlaneTransform.scale = { 2.0f, 2.0f, 2.0f };

	NtshEngn::Image* rightPlaneImage = assetManager->createImage();
	rightPlaneImage->width = 1;
	rightPlaneImage->height = 1;
	rightPlaneImage->format = NtshEngn::ImageFormat::R8G8B8A8;
	rightPlaneImage->colorSpace = NtshEngn::ImageColorSpace::SRGB;
	rightPlaneImage->data = { 0, 255, 0, 255 };

	NtshEngn::Material rightPlaneMaterial;
	rightPlaneMaterial.diffuseTexture.image = rightPlaneImage;
	rightPlaneMaterial.diffuseTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	rightPlaneMaterial.diffuseTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	rightPlaneMaterial.diffuseTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	rightPlaneMaterial.diffuseTexture.imageSampler.anisotropyLevel = 0.0f;
	rightPlaneMaterial.occlusionTexture.image = leftPlaneORM;
	rightPlaneMaterial.occlusionTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	rightPlaneMaterial.occlusionTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	rightPlaneMaterial.occlusionTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	rightPlaneMaterial.occlusionTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	rightPlaneMaterial.occlusionTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	rightPlaneMaterial.occlusionTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	rightPlaneMaterial.occlusionTexture.imageSampler.anisotropyLevel = 0.0f;
	rightPlaneMaterial.roughnessTexture.image = leftPlaneORM;
	rightPlaneMaterial.roughnessTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	rightPlaneMaterial.roughnessTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	rightPlaneMaterial.roughnessTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	rightPlaneMaterial.roughnessTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	rightPlaneMaterial.roughnessTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	rightPlaneMaterial.roughnessTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	rightPlaneMaterial.roughnessTexture.imageSampler.anisotropyLevel = 0.0f;
	rightPlaneMaterial.metalnessTexture.image = leftPlaneORM;
	rightPlaneMaterial.metalnessTexture.imageSampler.magFilter = NtshEngn::ImageSamplerFilter::Nearest;
	rightPlaneMaterial.metalnessTexture.imageSampler.minFilter = NtshEngn::ImageSamplerFilter::Nearest;
	rightPlaneMaterial.metalnessTexture.imageSampler.mipmapFilter = NtshEngn::ImageSamplerFilter::Nearest;
	rightPlaneMaterial.metalnessTexture.imageSampler.addressModeU = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	rightPlaneMaterial.metalnessTexture.imageSampler.addressModeV = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	rightPlaneMaterial.metalnessTexture.imageSampler.addressModeW = NtshEngn::ImageSamplerAddressMode::ClampToEdge;
	rightPlaneMaterial.metalnessTexture.imageSampler.anisotropyLevel = 0.0f;

	NtshEngn::Renderable rightPlaneRenderable;
	rightPlaneRenderable.mesh = &planeMesh->primitives[0].mesh;
	rightPlaneRenderable.material = &rightPlaneMaterial;
	ecs->addComponent(rightPlane, rightPlaneRenderable);

	ecs->addComponent(rightPlane, planeCollidable);

	// Light
	NtshEngn::Entity light = ecs->createEntity();

	NtshEngn::Light lightLight;
	lightLight.color = { 0.05f, 0.05f, 0.05f };
	lightLight.type = NtshEngn::LightType::Point;
	ecs->addComponent(light, lightLight);
}

int main() {
	NtshEngn::Core core;

	// Initialize
	core.init();

	// Scene
	scene(core);

	// Loop
	core.update();

	// Destroy
	core.destroy();

	return 0;
}